 <?php
/**
 * Makes it easier for other programs and servers to access song data on the database server.
 *
 *  Lyrics:
 *      URL: song_api.php?title={title}&artist={artist}&album={album}&return=lyrics
 *      Notes: Artist name is optional but recommended
 *      Notes: Album name is optional but recommended
 *
 *  Volume:
 *      URL: song_api.php?title={title}&artist={artist}&return=volume
 *      Notes: Artist name is optional but recommended
 *
 *  Cover art:
 *      URL: song_api.php?album={album}&artist={artist}&return=coverart
 *      Notes: Artist name is optional but recommended
 *
 * If you get an error message even though you typed everything correctly, try using the
 * following function in the calling script before making the request.
 *
    function clean_url($url, $title, $artist, $album) {

        // Insert the song info
        $url = str_replace("{title}", rawurlencode($title), $url);
        $url = str_replace("{artist}", rawurlencode($artist), $url);
        $url = str_replace("{album}", rawurlencode($album), $url);

        return $url;
    }
 *
 * Added: 2017-0?-??
 * Modified: 2018-09-20
**/


/**
 * Enable/Disable debug mode
 *
 * To use debugmode
 *    1) Set $debugmode to true
 *    2) Open up a browser on another computer
 *    3) Type in the url generated by the calling script and add '&browser=stderr` to the end of the url
 *
**/
$debugmode = false;

/**
 * The URL to download the album coverart from
 *
 * The trailing forward slash (/) is not required
**/
$server = 'http://www.example.com/files';

// Server-side form data validation and sanity checking
require './cl_Validation.php';
$valid = new validate();

# Setting $browser to 'stderr' will allow the script to send the
# debug messages to the web browser.
$browser = $valid->get_value('browser');

if (($debugmode === true) && ($browser != 'stderr')) {
    # Return a nice error message instead of crashing something.
    echo json_encode(array("error" => array('msg' => 'Song API debug mode is enabled. Try again later.')));
    exit;
}

/**
 *************
 * Add your database connection code here.
 *
 * Note: When setting up database connections, I use $dbc as
 *       the handle for the connection.
 *
 *       You will need to update all lines that contain $dbc to
 *       match the functions used by your database connection.
 *************
**/

// Get the info from $_POST
$origtitle = rawurldecode($valid->get_value('title'));
$origartist = rawurldecode($valid->get_value('artist'));
$origalbum = rawurldecode($valid->get_value('album'));
$return = $valid->get_value('return');

// Using short names simplifies database searching
$title = GenShortName($origtitle);
$artist = GenShortName($origartist);
$album = GenShortName($origalbum);

if ($debugmode) {
    // Print out the data as received by the API
    echo '$origtitle: '.$origtitle.'<br>$origartist: '.$origartist.'<br>$origalbum: '.$origalbum.'<br>$return: '.$return."<br><br>\n";
}

/////
// BEGIN functions
function get_lyrics($where) {

    global $dbc, $origtitle, $origartist, $debugmode;

    // Make sure the lyrics exist
    $query_lyrics = $dbc->select('Lyrics', $where, 'Lyrics');
    $lyricscnt = $dbc->numRows($query_lyrics);

    if ($debugmode) {
        echo 'get_lyrics(): '.$dbc->getQueryString().'<br>';
    }

    if ($lyricscnt < 1) {
        // Uhhm. Okay. The song existed a few milliseconds ago.

        echo json_encode(array("error" => array('msg' => 'Unable to find "'.$origtitle.'" by "'.$origartist.'".')));
        exit;

    } elseif ($lyricscnt == 1) {
        // Get, format and return lyrics.

        // Get the lyrics
        $lyrics = $dbc->fieldValue($query_lyrics);

        // Replace \r\n with \n
        $lyrics = str_replace("\r\n", "\n", $lyrics);

        // Catch any stray \r
        $lyrics = str_replace("\r", "\n", $lyrics);

        // Return the lyrics
        echo json_encode(array('lyrics' => $lyrics));
        exit;

    } else {
        // Multiple matches found. Not possible unless the database has been incorrectly configured.

        echo json_encode(array("error" => array('msg' => 'Multiple songs matched the lyrics query.')));
        exit;
    }
}
// END function get_lyrics()
/////

function displayCoverArt($album, $artist = '', $fb = 'front') {
    /**
     * Displays the cover art if found or a message if not found
     *
     * Added: 2017-05-21
     * Modified: 2017-06-02
     *
     * @param Required string $album Name or SHA-1 hash of cover art file
     * @param Optional string $artist ID number of the album this coverart is for
     * @param Optional string $fb Value must be 'front' or 'back' if used
     *                            This tells the function which coverart it is displaying
     *
     * @return string
    **/

    global $dbc, $origartist, $origalbum, $server;

    if ($album != '' && $artist != '') {
        // Use album and artist name to get album cover art file name

        // Get artist ID
        $artistid = $dbc->fieldValue($dbc->select('`Songlyrics`.`Artists`', 'ShortName = "'.$artist.'"', array('ArtistID')));
        if (($artistid === NULL) || ($artistid == '')) {
            echo json_encode(array("nocoverart" => '', "error" => array('msg' => 'Artist "'.$origartist.'" not in database.')));
            exit;
        }

        // Get cover art file name
        $filename = $dbc->fieldValue($dbc->select('`Songlyrics`.`Albums`', 'ShortName = "'.$album.'" and ArtistID = '.$artistid, array('CoverArtFront')));
        if (($filename === NULL) || ($filename == '')) {
            // Album not in database
            echo json_encode(array("nocoverart" => '', "error" => array('msg' => 'Album "'.$origalbum.'" not in database.')));
            exit;
        }

        // Get files SHA1 hash
        $filehash = $dbc->fieldValue($dbc->select('`Files`.`FileInfo`', 'FileName = "'.$filename.'"', array('FileSHA1')));
        if (($filehash === NULL) || ($filehash == '')) {
            echo json_encode(array("nocoverart" => '', "error" => array('msg' => 'Unable to find file info.')));
            exit;
        }

        echo json_encode(array('coverart' => $server.'/'.substr($filehash,0,1).'/'.substr($filehash,0,2).'/'.$filename));
        exit;

    } elseif ($album != '') {
        // Only given album name

        $query = $dbc->select('`Songlyrics`.`Albums`', 'ShortName = "'.$album.'"', array('CoverArtFront'));
        if ($dbc->numRows($query) > 1 ) {
            // Multiple matches found

            if ($debugmode) {
                echo 'Multiple albums with the name "'.$origalbum.'" were found.<br>';
            }

            echo json_encode(array("error" => array('msg' => 'Artist name required due to multiple albums matching "'.$origalbum.'".')));
            exit;

        }

        // Get cover art file name
        $filename = $dbc->fieldValue($query);
        if ($filename == '') {
            echo json_encode(array("error" => array('msg' => 'Album "'.$origalbum.'" not in database.')));
            exit;
        }

        $query = $dbc->select('`Files`.`FileInfo`', 'FileName = "'.$filename.'"', array('FileSHA1'));
        if ($dbc->numRows($query) > 1 ) {
            // Multiple matches found

            if ($debugmode) {
                echo 'Multiple files with the name "'.$filename.'" were found.<br>';
            }

            echo json_encode(array("error" => array('msg' => 'Multiple files with the name "'.$filename.'" were found.')));
            exit;

        }

        // Get files SHA1 hash
        $filehash = $dbc->fieldValue($query);
        if ($filehash == '') {
            echo json_encode(array("error" => array('msg' => 'Unable to find file info.')));
            exit;
        }

        echo json_encode(array('coverart' => $server.'/'.substr($filehash,0,1).'/'.substr($filehash,0,2).'/'.$filename));
        exit;

    } else {

        echo json_encode(array("error" => array('msg' => 'Album name required to load coverart.')));
        exit;
    }
}
// END function displayCoverArt()
/////

if ($return == 'lyrics') {
    # Get the song lyrics

    if ($title == '') {
        // Song name required

        echo json_encode(array('error' => array('msg' => 'Song name required to retrieve lyrics.')));
        exit;
    }

    // Is there a song with the name $title in the database?
    $query_songid = $dbc->select('Lyrics', 'ShortName = "'.$title.'"', 'SongID');
    $songcnt = $dbc->numRows($query_songid);

    if ($debugmode) {
        echo 'Main::return_lyrics - Count number of songs named: '.$origtitle.'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.$dbc->getQueryString().'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Song Count: '.$songcnt.'<br>';
    }

    if ($songcnt <= 0) {
        // Song count less than or equal to 0

        echo json_encode(array("error" => array('msg' => 'Lyrics not in database.')));
        exit;
    }

    if ($songcnt > 1) {
        // Query matched multiple songs

        if ($artist == '') {
            // Artist name required so the script knows which song to retrieve

            echo json_encode(array("error" => array('msg' => 'Artist name required due to multiple songs matching "'.$origtitle.'".')));
            exit;
        }

        // Does the artist exist?
        $query_artistid = $dbc->select('Artists', 'ShortName = "'.$artist.'"', 'ArtistID');
        $artistcnt = $dbc->numRows($query_artistid);

        if ($debugmode) {
            echo 'Main::return_lyrics - Count number of artists named: "'.$origartist.'"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.$dbc->getQueryString().'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Artist Count: '.$artistcnt.'<br>';
        }

        if ($artistcnt < 1) {
            // Artist not found

            echo json_encode(array("error" => array('msg' => 'Multiple songs with the name "'.$origtitle.'" were found but the artist, "'.$origartist.'", was not found.')));
            exit;

        } elseif ($artistcnt == 1) {
            // Only 1 artist found

            $artistid = $dbc->fieldValue($query_artistid);

            // Check if this artist has multiple songs with the same name
            $query_lyricscnt = $dbc->select('Lyrics', 'ShortName = "'.$title.'" AND ArtistID = '.$artistid, 'SongID');
            $lyricscnt = $dbc->numRows($query_lyricscnt);

            if ($debugmode) {
                echo 'Main::return_lyrics - Count number of songs named "'.$origtitle.'" written by "'.$origartist.'"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.$dbc->getQueryString().'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Count: '.$lyricscnt.'<br>';
            }

            if ($lyricscnt > 1) {
                // Artist has multiple songs with the same name
                // Filter by album

                if ($album != '') {
                    $query_albumid = $dbc->select('Albums', 'ShortName = "'.$album.'" AND ArtistID = '.$artistid, 'AlbumID');
                    $albumcnt = $dbc->numRows($query_albumid);

                    if ($debugmode) {
                        echo 'Main::return_lyrics - Count number of albums named "'.$origalbum.'" written by "'.$origartist.'"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.$dbc->getQueryString().'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Count: '.$albumcnt.'<br>';
                    }

                    if ($albumcnt > 1) {
                        // This artist has multiple albums with the same name.
                        // Most likely this is due to a database error.

                        echo json_encode(array("error" => array('msg' => 'Searching for "'.$origtitle.'" by "'.$origartist.'" returned multiple albums with the same name.')));
                        exit;
                        
                    } elseif ($albumcnt == 1) {
                        // Got a match

                        $albumid = $dbc->fieldValue($query_albumid);

                        $where = 'ShortName = "'.$title.'" AND ArtistID = '.$artistid.' AND AlbumID = '.$albumid;
                        get_lyrics($where);

                    } else {
                        // No albums matching $album were found
                        echo json_encode(array("error" => array('msg' => 'The artist "'.$origartist.'" has multiple songs with the name "'.$origtitle.'". No album with the name "'.$origalbum.'" was found.')));
                        exit;
                    }
                } else {
                    // Album name required.

                    echo json_encode(array("error" => array('msg' => 'Album name required. The artist "'.$origartist.'" has multiple songs with the name "'.$origtitle.'".')));
                    exit;
                }

            } elseif ($lyricscnt == 1) {
                // $artist only has one song named $title

                $where = 'ShortName = "'.$title.'" AND ArtistID = '.$artistid;
                get_lyrics($where);

            } else {
                // $artist does not have any songs named $title in the database
        
                echo json_encode(array('error' => array('msg' => 'Lyrics not in found.')));
                exit;
            }
            // END if ($lyricscnt > 1)

        } else {
            // The artist is listed multiple times in the database.

            echo json_encode(array("error" => array('msg' => 'Unable to continue due to the artist "'.$origartist.'" being listed multiple times in the database.')));
            exit;
        }

    } elseif ($songcnt == 1) {
        /**
         * Only one song with the name $title.
         *
         * Even though only one song was found for $title, it may not have been written by $artist
         * The artist ID is used to make sure we return the correct lyrics.
         * 
        **/

        // Get artist ID if the artist name was given.
        if ($artist != '') {
            // Does the artist exist?
            $query_artistid = $dbc->select('Artists', 'ShortName = "'.$artist.'"', 'ArtistID');
            $artistcnt = $dbc->numRows($query_artistid);

            if ($debugmode) {
                echo 'query_artistid: '.$dbc->getQueryString().'<br>Artist Count: '.$artistcnt.'<br>';
            }

            if ($artistcnt == 1) {
                // Artist found

                $artistid = $dbc->fieldValue($query_artistid);

                $where = 'ShortName = "'.$title.'" AND ArtistID = '.$artistid;

                get_lyrics($where);

            } else {

                echo json_encode(array("error" => array('msg' => 'Unable to find "'.$origtitle.'" by "'.$origartist.'".')));
                exit;
            }

        } else {
            // No artist name given so return the first match found

            $where = 'SongId = '.$dbc->fieldValue($query_songid);
            get_lyrics($where);
        }

    }

} elseif ($return == 'volume') {
    # Get the volume for the song

    if ($title == '') {
        // Song name required

        echo json_encode(array('error' => array('msg' => 'Song name required to retrieve volume.')));
        exit;
    }

    // Is there a song with the name $title in the database?
    $query_songid = $dbc->select('Lyrics', 'ShortName = "'.$title.'"', 'SongID');
    $songcnt = $dbc->numRows($query_songid);

    if ($songcnt <= 0) {
        // Song count less than or equal to 0

        echo json_encode(array("error" => array('msg' => '"'.$origtitle.'" was not found in the database.')));
        exit;
    }

    if ($songcnt > 1) {
        // Query matched multiple songs

        if ($debugmode) {
            echo 'Multiple songs with the name "'.$origtitle.'" were found.<br>';
        }

        if ($artist != '') {
            // Does the artist exist?
            $query_artistid = $dbc->select('Artists', 'ShortName = "'.$artist.'"', 'ArtistID');
            $artistcnt = $dbc->numRows($query_artistid);

            if ($debugmode) {
                echo 'query_artistid: '.$dbc->getQueryString().'<br>Artist Count: '.$artistcnt.'<br>';
            }

            if ($artistcnt < 1) {
                // Artist not found

                echo json_encode(array("error" => array('msg' => 'Multiple songs with the name "'.$origtitle.'" were found but the artist, "'.$origartist.'", was not found.')));
                exit;

            } elseif ($artistcnt == 1) {
                // Only 1 artist found

                $artistid = $dbc->fieldValue($query_artistid);

                // Check if this artist has multiple songs with the same name
                $query_lyricscnt = $dbc->select('Lyrics', 'ShortName = "'.$title.'" AND ArtistID = '.$artistid, 'SongID');
                $lyricscnt = $dbc->numRows($query_lyricscnt);

                if ($lyricscnt > 1) {
                    // Artist has multiple songs with the same name
                    // Filter by album

                    if ($album != '') {
                        $query_albumid = $dbc->select('Albums', 'ShortName = "'.$album.'" AND ArtistID = '.$artistid, 'AlbumID');
                        $albumcnt = $dbc->numRows($query_albumid);

                        if ($albumcnt > 1) {
                            // This artist has multiple albums with the same name.

                            echo json_encode(array("error" => array('msg' => 'Searching for "'.$origtitle.'" by "'.$origartist.'" returned multiple albums with the same name.')));
                            exit;
                            
                        } elseif ($albumcnt == 1) {
                            // Got a match

                            $where = 'ShortName = "'.$title.'" AND ArtistID = '.$artistid.' AND AlbumID = '.$albumid;
                            $volume = $dbc->fieldValue($dbc->select('Lyrics', $where, 'volume'));

                            echo json_encode(array('volume' => $volume));
                            exit;

                        } else {
                            // No albums matching $album were found
                            echo json_encode(array("error" => array('msg' => 'No album with the name "'.$origalbum.'" was found. The artist "'.$origartist.'" has multiple songs with the name "'.$origtitle.'".')));
                            exit;
                        }
                    } else {
                        // Album name required.

                        echo json_encode(array("error" => array('msg' => 'Album name required. The artist "'.$origartist.'" has multiple songs with the name "'.$origtitle.'".')));
                        exit;
                    }

                } elseif ($lyricscnt == 1) {
                    // $artist only has one song named $title

                    $where = 'ShortName = "'.$title.'" AND ArtistID = '.$artistid;
                    $volume = $dbc->fieldValue($dbc->select('Lyrics', $where, 'volume'));

                    echo json_encode(array('volume' => $volume));
                    exit;

                } else {
                    // $artist does not have any songs named $title in the database
            
                    echo json_encode(array('error' => array('msg' => 'Song not in database.')));
                    exit;
                }
                // END if ($lyricscnt > 1)

            } else {
                // The artist is listed multiple times in the database.

                echo json_encode(array("error" => array('msg' => 'Unable to continue due to the artist "'.$origartist.'" being listed multiple times in the database.')));
                exit;
            }

        } else {
            // Artist name required so the script knows which song to retrieve

            echo json_encode(array("error" => array('msg' => 'Artist name required due to multiple songs matching "'.$origtitle.'".')));
            exit;
        }

    } elseif ($songcnt == 1) {
        /**
         * Only one song with the name $title.
         *
         * Even though only one song was found for $title, it may not have been written by $artist
         * The artist ID is used to make sure we return the correct lyrics.
         * 
        **/

        // Get artist ID if the artist name was given.
        if ($artist != '') {
            // Does the artist exist?
            $query_artistid = $dbc->select('Artists', 'ShortName = "'.$artist.'"', 'ArtistID');
            $artistcnt = $dbc->numRows($query_artistid);

            if ($debugmode) {
                echo 'query_artistid: '.$dbc->getQueryString().'<br>Artist Count: '.$artistcnt.'<br>';
            }

            if ($artistcnt == 1) {
                // Artist found

                $artistid = $dbc->fieldValue($query_artistid);

                $where = 'ShortName = "'.$title.'" AND ArtistID = '.$artistid;
                $volume = $dbc->fieldValue($dbc->select('Lyrics', $where, 'volume'));

                echo json_encode(array('volume' => $volume));
                exit;

            } else {

                echo json_encode(array("error" => array('msg' => 'Unable to find "'.$origtitle.'" by "'.$origartist.'".')));
                exit;
            }

        } else {
            // No artist name given so return the first match found

            $where = 'SongId = '.$dbc->fieldValue($query_songid);
            $volume = $dbc->fieldValue($dbc->select('Lyrics', $where, 'volume'));

            echo json_encode(array('volume' => $volume));
            exit;
        }

    } else {
        // Song count equal to or less than 0

        echo json_encode(array("error" => array('msg' => '"'.$origtitle.'" was not found in the database.')));
        exit;
    }

} elseif ($return == 'coverart') {
    // Get front album cover art

    displayCoverArt($album, $artist);

} else {
    echo json_encode(array("error" => array('msg' => 'Please specify if you want the song lyrics, volume, or coverart.')));
    exit;
}

// Last ditch/catch all error message
// This message should only be returned if there is a logic error or typo above
$jsondata = json_encode(array('error' => array('msg' => 'Let the admin know you saw a message that said your supposed to tell them about a message you saw.', 'post' => $_POST)));
echo $jsondata;

function GenShortName($str='') {
    /**
     * Creates the shortname from a given string
     * for easier searching of database.
     *
     * Note: This function will also need to be used when adding
     *       song info to the database so the info can be found.
    **/

    // Saves a few milliseconds if $str is blank
    if ($str != '') {

        // Removes all spaces, newlines and tabs
        $str = preg_replace('/\s+/', '', $str);

        // Some strings have non-alphanumeric characters in them
        // Any characters in this array will be preserved
        $find = array('$','!','#');

        $positions = array();
        $strlength = strlen($str);

        foreach ($find as $key => $findme) {

            // Set to 0 for each character in the $find array
            $offset = 0;

            // Make sure the character exists
            if (strpos($str, $findme, $offset) !== false) { 

                for($i = 0; $i<$strlength; $i++) {

                    // Match found
                    $pos = strpos($str, $findme, $offset);

                    if ($pos == $offset) {

                        // Save character position to array
                        $positions[$pos] = $findme;

                    }

                    // -Increment $offset so we don't find the same character
                    //  multiple times.
                    $offset++;

                }
                // END for($i = 0; $i<$strlength; $i++)

            }

        }
        // END foreach ($find as $key => $findme)

        // Sort the array by key, maintaining key[data] pairs
        ksort($positions);

        // Removes all non-alphnumeric characters
        $str = preg_replace("/[^A-Za-z0-9]/", '', $str);

        // Convert all characters to lower case
        $str = strtolower($str);

        // Reinsert the contents of the $positions array
        foreach ($positions as $pos => $char) {
            $str = substr_replace($str,$char,$pos,0);
        }
    }

    return $str;
}
// END function GenShortName();
?>
